<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns:os="http://www.mulesoft.org/schema/mule/os" xmlns:email="http://www.mulesoft.org/schema/mule/email"
	xmlns:validation="http://www.mulesoft.org/schema/mule/validation"
	xmlns:batch="http://www.mulesoft.org/schema/mule/batch" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns:wsc="http://www.mulesoft.org/schema/mule/wsc" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/wsc http://www.mulesoft.org/schema/mule/wsc/current/mule-wsc.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd
http://www.mulesoft.org/schema/mule/validation http://www.mulesoft.org/schema/mule/validation/current/mule-validation.xsd
http://www.mulesoft.org/schema/mule/email http://www.mulesoft.org/schema/mule/email/current/mule-email.xsd
http://www.mulesoft.org/schema/mule/os http://www.mulesoft.org/schema/mule/os/current/mule-os.xsd">
	<sub-flow name="deleteCryptosSubFlow" doc:id="7c0f9ac1-8274-4acf-8b25-97241151bf0c" >
		<validation:is-not-null doc:name="Is not null ID" doc:id="c4cb0545-a890-4f7d-b95a-b792490ecf04" value="#[attributes.uriParams.id]" message="document id is null"/>
		<wsc:consume operation="deleteCoin" doc:name="CoinStorageService_deleteCoin" doc:id="5abcc034-d642-41a4-9750-13fa481a6936" config-ref="Web_Service_Consumer_Config">
			<wsc:message >
				<wsc:body ><![CDATA[#[null]]]></wsc:body>
				<wsc:headers ><![CDATA[#[%dw 2.0
output application/xml
ns ns0 http://training.mulesoft.com/
  ---
  "headers": {
  	ns0#deleteCoinHeader:{
    	documentID: attributes.uriParams."id"
    	}
  }]]]></wsc:headers>
			</wsc:message>
		</wsc:consume>
		<ee:transform doc:name="result" doc:id="b22dcc9f-b170-4b26-b2fd-aa24f8d590ca" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
ns ns0 http://training.mulesoft.com/
---
result: payload.body.ns0#deleteCoinResponse.response]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<logger level="INFO" doc:name="Logger" doc:id="64b6fcb4-a740-4268-ad11-5e668156ed75" message="#[payload]"/>
	
</sub-flow>
	<sub-flow name="getCryptos" doc:id="1545f75e-f2d1-49fa-8cd6-dc662be6843e" >
		<set-variable value="#[message.attributes.queryParams.'slug']" doc:name="setSlug" doc:id="46be1a7e-2bd8-48e6-9461-3518e400a851" variableName="slug" />
		<set-variable value="#[message.attributes.queryParams.'sortBy']" doc:name="set sortBy" doc:id="cebaef73-70fd-446d-b0f9-a92d0c7c10ac" variableName="sortBy"/>
		<flow-ref doc:name="to getCoinMarket" doc:id="5cf0d0b5-12d2-492e-9165-fc0b313f8163" name="getCoinMarket"/>
		<choice doc:name="Choice" doc:id="978a94cd-4334-4c12-8df1-7273870beacf" >
			<when expression="#[vars.sortBy == 'price']">
				<ee:transform doc:name="sortBy name" doc:id="ee7582d4-c9bf-4317-b94a-2250926be109" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
import modules::trimString
var dat = vars.'coin-market'
var dat1 = vars.'coin-cap'
var body={
	"data": dat map (object, index)->{
		"data1" : dat1 map(object2,index2)->{
     		("name": object.name)if(object.name==object2.name),
     		("symbol": object.symbol)if(object.name==object2.name),
     		("supply": object.supply as String)if(object.name==object2.name),
      		("coin_market_price": object.'coin_market_price' ++ " \$")if(object.name==object2.name),
      		("coin_cap_price": object2.'coin_cap_price' default "" ++ " \$")if(object.name==object2.name),
      		("coin_market_volume24h":trimString::trimStringOfDigits(object.'coin_market_volume24h',2) ++ " \$")if(object.name==object2.name),
      		("coin_cap_volume24h": trimString::trimStringOfDigits(object2.'coin_cap_volume24h' default "" ,2) ++ " \$")if(object.name==object2.name)
	}
 	}
}

---
{
"date": now() as String,
	"data":(flatten(body.data.data1) filter(value,index)->(sizeOf(value)>0)) default []
	orderBy ($.'coin_market_price' replace " \$" with "") as String as Number
	
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
			</when>
			<when expression="#[vars.sortBy == 'volume']">
				<ee:transform doc:name="sortBy volume" doc:id="1df73527-41c0-4b5b-b472-cb4db4063d3f" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
import modules::trimString
var dat = vars.'coin-market'
var dat1 = vars.'coin-cap'
var body={
	"data": dat map (object, index)->{
		"data1" : dat1 map(object2,index2)->{
     		("name": object.name)if(object.name==object2.name),
     		("symbol": object.symbol)if(object.name==object2.name),
     		("supply": object.supply as String)if(object.name==object2.name),
      		("coin_market_price": object.'coin_market_price' ++ " \$")if(object.name==object2.name),
      		("coin_cap_price": object2.'coin_cap_price' default "" ++ " \$")if(object.name==object2.name),
      		("coin_market_volume24h":trimString::trimStringOfDigits(object.'coin_market_volume24h',2) ++ " \$")if(object.name==object2.name),
      		("coin_cap_volume24h": trimString::trimStringOfDigits(object2.'coin_cap_volume24h' default "" ,2) ++ " \$")if(object.name==object2.name)
	}
 	}
}

---
{
"date": now() as String,
	"data":(flatten(body.data.data1) filter(value,index)->(sizeOf(value)>0)) default []
	orderBy ($.'coin_market_volume24h' replace " \$" with "") as String as Number
	
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
			</when>
			<otherwise>
				<ee:transform doc:name="default by name" doc:id="a9fe84cf-0c8b-478b-bb2e-41a3905d9580">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/json
import modules::trimString
var dat = vars.'coin-market'
var dat1 = vars.'coin-cap'
var body={
	"data": dat map (object, index)->{
		"data1" : dat1 map(object2,index2)->{
     		("name": object.name)if(object.name==object2.name),
     		("symbol": object.symbol)if(object.name==object2.name),
     		("supply": object.supply as String)if(object.name==object2.name),
      		("coin_market_price": object.'coin_market_price' ++ " \$")if(object.name==object2.name),
      		("coin_cap_price": object2.'coin_cap_price' default "" ++ " \$")if(object.name==object2.name),
      		("coin_market_volume24h":trimString::trimStringOfDigits(object.'coin_market_volume24h',2) ++ " \$")if(object.name==object2.name),
      		("coin_cap_volume24h": trimString::trimStringOfDigits(object2.'coin_cap_volume24h' default "" ,2) ++ " \$")if(object.name==object2.name)
	}
 	}
}

---
{
"date": now() as String,
	"data":(flatten(body.data.data1) filter(value,index)->(sizeOf(value)>0)) orderBy $.name
	
}
]]></ee:set-payload>
			</ee:message>
		</ee:transform>
			</otherwise>
		</choice>
		<flow-ref doc:name="to kayValueProcess" doc:id="5d22fb9f-4456-48a3-ab09-8ecbcd5c608a" name="keyValueProcess" />
	</sub-flow>
	<sub-flow name="keyValueProcess" doc:id="c60c2d0b-600d-4882-b72c-92811503b6bd" >
		<ee:transform doc:name="JSON to XML" doc:id="45ac9005-8715-43bb-991a-df4d6c78011b" >
			<ee:message >
			</ee:message>
			<ee:variables >
				<ee:set-variable variableName="payloadXML" ><![CDATA[%dw 2.0
output application/xml
ns ns0 http://training.mulesoft.com/
---
  ns0#createCoin: {
    date: payload.date,
    data:{(payload.data map (object, index)-> {
      coin: object
  })
  }
 }
]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<wsc:consume operation="createCoin" doc:name="Consume" doc:id="9859dc81-dc93-4fad-b121-7e6961fa38b1" config-ref="Web_Service_Consumer_Config">
			<wsc:message>
				<wsc:body><![CDATA[#[vars.payloadXML]]]></wsc:body>
			</wsc:message>
		</wsc:consume>
		<set-variable value="#[%dw 2.0&#10;ns ns0 http://training.mulesoft.com/&#10;output text/plain&#10;---&#10;payload.headers.createCoinResponseHeader.ns0#createCoinResponseHeader.documentID]" doc:name="Set key" doc:id="e318b6de-9a10-49db-bbad-e63b1b47f618" variableName="key" />
		<email:send doc:name="Send" doc:id="ab8b134f-bfd0-4281-b964-de0f1047f328" config-ref="Email_SMTP" fromAddress="Typicm6663@gmail.com" subject="New coin created">
			<email:to-addresses >
				<email:to-address value="Typicm@gmail.com" />
			</email:to-addresses>
			<email:body contentType="text/plain" encoding="UTF-8">
				<email:content><![CDATA[#["Coin with ID: " ++ vars.key as String ++" successfully created"]]]></email:content>
			</email:body>
		</email:send>
		<ee:transform doc:name="HashCode" doc:id="8dc00761-9f09-432d-a329-d87cb668c329">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/json
var pay = payload
---
{
	"hash": java!com::currency::CryptoCurrency::getHashCode(pay),
	"data": payload
}]]></ee:set-payload>
			</ee:message>
			<ee:variables>
				<ee:set-variable variableName="data"><![CDATA[%dw 2.0
output application/json
---
payload]]></ee:set-variable>
				<ee:set-variable variableName="httpStatus" ><![CDATA[201]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<os:store doc:name="Store" doc:id="19fe72b3-5a66-40b6-8731-de622cc7edf6" key="vars.key" objectStore="Object_store">
			<os:value ><![CDATA[#[payload.hash]]]></os:value>
		</os:store>
		<ee:transform doc:name="Transform Message" doc:id="8773c141-2fdc-45c2-be54-ed60a42150f6" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	Message: "Document with ID: "++ (vars.key default "") ++" successfully created"
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</sub-flow>
	<sub-flow name="getCoinMarket" doc:id="4661375a-7ced-4de9-8f9b-f96a9064376b" >
		<http:request method="GET" doc:name="GET coinMarket" doc:id="71929776-d4b9-4500-89e7-6845cb29e1c8" path="/cryptocurrency/quotes/latest" config-ref="HTTP_Request_configuration_CoinMarket">
					<http:query-params><![CDATA[#[output application/java
---
{
	"slug" : vars.slug
}]]]></http:query-params>
				</http:request>
		<set-variable value="#[payload.data pluck (object,index)-&gt;{&#10;			&quot;name&quot;: object.name,&#10;     		&quot;symbol&quot;: object.symbol,&#10;     		&quot;supply&quot;: object.'total_supply',&#10;      		&quot;coin_market_price&quot;: object.quote.USD.price,&#10;      		&quot;coin_market_volume24h&quot;: object.quote.USD.'volume_24h'	&#10;}]" doc:name="payload-coinMarket" doc:id="a2c7baad-6fdd-416c-a867-30ac5c92eca7" variableName="coin-market" />
		<logger level="INFO" doc:name="Logger" doc:id="13cedef5-2626-4ec6-b618-1d1ed590e088" message='"request CoinMarket is successfully"' />
		<flow-ref doc:name="getCoinCup" doc:id="2599ef11-e731-4812-ab18-5220431908de" name="getCoinCup" />
	</sub-flow>
	<sub-flow name="getCoinCup" doc:id="70b58ac0-9b4c-4c5f-a130-a9cb6d65e5e1" >
		<http:request method="GET" doc:name="GET coinCup" doc:id="cd4458ac-8f76-473b-863c-0d16ac79f92b" config-ref="HTTP_Request_configuration_CoinCup" path="/assets">
					<http:query-params><![CDATA[#[output application/java
---
{
	"ids" : vars.slug
}]]]></http:query-params>
				</http:request>
		<set-variable value='#[payload.data map (object,index)-&gt;{&#10;			"name": object.name,&#10;     		"symbol": object.symbol,&#10;      		"coin_cap_price": object.priceUsd,&#10;      		"coin_cap_volume24h": object.volumeUsd24Hr	&#10;}]' doc:name="payload-coinCap" doc:id="a26efa45-fd42-4469-9b81-aca60d4ae6d3" variableName="coin-cap" />
		<logger level="INFO" doc:name="Logger" doc:id="273fac5e-504c-43f1-bb3b-1660324f7c11" message='"request CoinCup is successfully"' />
	</sub-flow>
	<sub-flow name="readCryptos" doc:id="1599ab17-d4e4-4141-920b-d2ddf6a19fea" >
		<set-variable value='#[attributes.uriParams.id]' doc:name="Set Variable" doc:id="89534282-e951-4034-846c-22300a3e2354" variableName="setID"/>
		<wsc:consume doc:name="Consume" doc:id="d7d7bda6-73dd-4738-b79b-83d7ecee0552" config-ref="Web_Service_Consumer_Config" operation="readCoin">
			<wsc:message >
				<wsc:body ><![CDATA[#[null]]]></wsc:body>
				<wsc:headers ><![CDATA[#[%dw 2.0
output application/xml
ns ns0 http://training.mulesoft.com/
  ---
  "headers": {
    ns0#readCoinHeader:{
      documentID: vars.setID
      }
  }]]]></wsc:headers>
			</wsc:message>
		</wsc:consume>
		<choice doc:name="Choice" doc:id="205f3196-3f83-48f0-9a7b-49cf927d9193" >
			<when expression="#[%dw 2.0&#10;ns ns0 http://training.mulesoft.com/&#10;---&#10;payload.body.ns0#readCoinResponse.response == null]">
				<ee:transform doc:name="Transform Message" doc:id="3d49d47a-3f5f-445f-9f1d-00010ef51508" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
ns ns0 http://training.mulesoft.com/
output application/json
---
{
  (oldDate: payload.body.ns0#readCoinResponse.oldDate) if (payload.body.ns0#readCoinResponse.oldDate != null),
  (newDate: payload.body.ns0#readCoinResponse.newDate) if (payload.body.ns0#readCoinResponse.newDate != null),
  (dateDifference: payload.body.ns0#readCoinResponse.dateDifference) if (payload.body.ns0#readCoinResponse.dateDifference != null),
  (date: payload.body.ns0#readCoinResponse.date) if (payload.body.ns0#readCoinResponse.date != null),
  data: payload.body.ns0#readCoinResponse.data.*coin map (object, index) -> {
    name: object.name,
    symbol: object.symbol,
    supply: object.supply,
    (description: object.description) if (object.description != null),
    (developmentStatus: object.developmentStatus) if (object.developmentStatus != null),
    (proofType: object.proofType) if (object.proofType != null),
    (orgStructure: object.orgStructure) if (object.orgStructure != null),
    (coin_market_oldPriceUSD: object.'coin_market_oldPriceUSD') if (object.'coin_market_oldPriceUSD' != null),
    (coin_cap_oldPriceUSD: object.'coin_cap_oldPriceUSD') if (object.'coin_cap_oldPriceUSD' != null),
    (coin_market_newPriceUSD: object.'coin_market_newPriceUSD') if (object.'coin_market_newPriceUSD' != null),
    (coin_cap_newPriceUSD: object.'coin_cap_newPriceUSD') if (object.'coin_cap_newPriceUSD' != null),
    (coin_market_priceDifference: object.'coin_market_priceDifference') if (object.'coin_market_priceDifference' != null),
    (coin_cap_newPriceUSD: object.'coin_cap_priceDifference') if (object.'coin_cap_priceDifference' != null),
    (coin_market_price: object.'coin_market_price') if (object.'coin_market_price' != null),
    (coin_cap_price: object.'coin_cap_price') if (object.'coin_cap_price' != null),
    coin_market_volume24h: object.'coin_market_volume24h',
    coin_cap_volume24h: object.'coin_cap_volume24h'
  }
}]]></ee:set-payload>
					</ee:message>
					<ee:variables >
						<ee:set-variable variableName="httpStatus" ><![CDATA[200]]></ee:set-variable>
					</ee:variables>
				</ee:transform>
			</when>
			<otherwise >
				<ee:transform doc:name="Document doesn't exist" doc:id="54ed2762-1774-40d7-bf00-4c262ce01b18" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0ns ns0 http://training.mulesoft.com/

output application/json
---
{
	result: payload.body.ns0#readCoinResponse.response
}]]></ee:set-payload>
					</ee:message>
					<ee:variables >
						<ee:set-variable variableName="httpStatus" ><![CDATA[200]]></ee:set-variable>
					</ee:variables>
				</ee:transform>
			</otherwise>
		</choice>
	</sub-flow>
</mule>
