<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:email="http://www.mulesoft.org/schema/mule/email" xmlns:vm="http://www.mulesoft.org/schema/mule/vm"
	xmlns:file="http://www.mulesoft.org/schema/mule/file"
	xmlns:os="http://www.mulesoft.org/schema/mule/os" xmlns:batch="http://www.mulesoft.org/schema/mule/batch" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns:wsc="http://www.mulesoft.org/schema/mule/wsc" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/wsc http://www.mulesoft.org/schema/mule/wsc/current/mule-wsc.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd
http://www.mulesoft.org/schema/mule/os http://www.mulesoft.org/schema/mule/os/current/mule-os.xsd
http://www.mulesoft.org/schema/mule/file http://www.mulesoft.org/schema/mule/file/current/mule-file.xsd
http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/current/mule-vm.xsd
http://www.mulesoft.org/schema/mule/email http://www.mulesoft.org/schema/mule/email/current/mule-email.xsd">
	
	<sub-flow name="update_sub_slow" doc:id="b26dfe17-d675-48e2-b276-510e3c7d5536" >
		<set-variable value='#[attributes.uriParams."id"]' doc:name="Set documentID" doc:id="8e0ab8ce-f984-47c3-94e5-3fca86cdf285" variableName="id"/>
		<wsc:consume operation="readCoin" doc:name="Get all data from SOAP by id" doc:id="f5509784-89b9-4577-b696-97aede9bac96" config-ref="Web_Service_Consumer_Config">
			<wsc:message >
				<wsc:body ><![CDATA[#[null]]]></wsc:body>
				<wsc:headers ><![CDATA[#[%dw 2.0
output application/xml
ns ns0 http://training.mulesoft.com/
  ---
  "headers": {
    ns0#readCoinHeader:{
      documentID: vars.id
      }
  }]]]></wsc:headers>
			</wsc:message>
		</wsc:consume>
		<choice doc:name="Choice" doc:id="6286912e-d9c2-46f0-9cac-2088d2ee0ad0" >
      <when expression="#[%dw 2.0&#10;ns ns0 http://training.mulesoft.com/&#10;---&#10;payload.body.ns0#readCoinResponse.response == null]">
				<ee:transform doc:name="XML to JSON" doc:id="b69fc244-9a3c-4521-ba44-831fc9cf6c39">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
ns ns0 http://training.mulesoft.com/

output application/json
---
{
  date: payload.body.ns0#readCoinResponse.date,
  data: payload.body.ns0#readCoinResponse.data.*coin map (object, index) -> {
    name: object.name,
    symbol: object.symbol,
    supply: object.supply,
    'coin_market_price': object.'coin_market_price',
    'coin_cap_price': object.'coin_cap_price',
    'coin_market_volume24h': object.'coin_market_volume24h',
    'coin_cap_volume24h':object.'coin_cap_volume24h'
  }
}]]></ee:set-payload>
			</ee:message>
			<ee:variables>
				<ee:set-variable variableName="consumeResponse"><![CDATA[%dw 2.0
ns ns0 http://training.mulesoft.com/

output application/json
---
{
  date: payload.body.ns0#readCoinResponse.date,
  data: payload.body.ns0#readCoinResponse.data.*coin map (object, index) -> {
    name: object.name,
    symbol: object.symbol,
    supply: object.supply,
    'coin_market_price': object.'coin_market_price',
    'coin_cap_price': object.'coin_cap_price',
    'coin_market_volume24h': object.'coin_market_volume24h',
    'coin_cap_volume24h':object.'coin_cap_volume24h'
  }
}]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
				<ee:transform doc:name="Map all coin_ids for next requests" doc:id="7e933dba-54d6-41cd-ac55-77245542f965">
			<ee:message>
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	"coin-ids" : payload.data map (object, index) -> {
		"coin_id" : lower(object.symbol ++ "-" ++ object.name replace " " with("-") )
	}
}]]></ee:set-payload>
			</ee:message>
			<ee:variables>
			</ee:variables>
		</ee:transform>
				<set-payload value='#[%dw 2.0&#10;output application/java&#10;---&#10;payload."coin-ids".*"coin_id"]' doc:name="Set coin_ids as java Array" doc:id="14f5c1ff-7075-4d9c-8276-675a999dd6dd" />
				<batch:job jobName="implementationBatch_Job" doc:id="42725067-15d5-4cf0-a8be-e06c3ac984e4">
			<batch:process-records>
				<batch:step name="Batch_Step" doc:id="1c6d158a-8ba9-4768-9a43-78794783b52d">
					<http:request method="GET" doc:name="GET data from coin-paprika-system-api" doc:id="6551e95c-e3d0-44a9-b658-f90688780116" config-ref="HTTP_Request_configuration" path="/coins/{coin_id}">
				<http:uri-params><![CDATA[#[output application/java
---
{
	"coin_id" : payload
}]]]></http:uri-params>
			</http:request>
					<batch:aggregator doc:name="Batch Aggregator" doc:id="7a84f04a-93c3-4afd-a267-1fdbdea4ea98" size="100" preserveMimeTypes="true">
						<ee:transform doc:name="Convert to JSON" doc:id="8d4c609a-0184-4913-9527-502f1670d8ca">
							<ee:message>
								<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
payload as Array]]></ee:set-payload>
							</ee:message>
						</ee:transform>
								<vm:publish doc:name="Publish" doc:id="3d130d6c-8425-4931-9ac5-c6a4b03683ec" config-ref="VM_Config" queueName="sysResponse" />
					</batch:aggregator>
				</batch:step>
			
</batch:process-records>
		
</batch:job>
				<vm:consume queueName="allDataResponse" doc:name="Consume" doc:id="bc5c97ce-10bb-4569-83ff-d936ce20871a" config-ref="VM_Config" timeout="60"/>
				<ee:transform doc:name="Map all data" doc:id="830feef8-725e-4cf9-98fe-f71c2ca707a1" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
var body={
	"data": payload as Array map(object,index) ->{
		"data1": vars.consumeResponse.data map(object2,index2)->{
			("name":object2.name)if(object2.name==object.name),
			("symbol": object2.symbol)if(object2.name==object.name),
			("supply": object2.supply as String)if(object2.name==object.name),
			("description": object.description)if(object2.name==object.name),
			("developmentStatus": object.development_status)if(object2.name==object.name),
			("proofType": object.proof_type)if(object2.name==object.name),
			("orgStructure": object.org_structure)if(object2.name==object.name),
			("coin_market_price": object2."coin_market_price" default "")if(object2.name==object.name),
			("coin_cap_price": object2.'coin_cap_price' default "")if(object2.name==object.name),
			("coin_market_volume24h":object2.'coin_market_volume24h' default "")if(object2.name==object.name),
			("coin_cap_volume24h": object2.'coin_cap_volume24h' default "")if(object2.name==object.name)
		}
	}
}
output application/json
---
{
	"date":vars.consumeResponse.date,
	"data":(flatten(body.data.data1)filter(value,index)->(sizeOf(value)>0))
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
				<ee:transform doc:name="JSON to XML" doc:id="9898a0f4-7301-424c-8f91-1e2430ac6c54">
					<ee:message>
						<ee:set-payload><![CDATA[%dw 2.0
output application/xml
ns ns0 http://training.mulesoft.com/
---
  ns0#updateCoin: {
  	date:payload.date,
    data:{(payload.data map (object, index)-> {
      coin: object
  })
  }
 }]]></ee:set-payload>
					</ee:message>
				</ee:transform>
				<wsc:consume operation="updateCoin" doc:name="Update data by documentID" doc:id="6ae5e0bb-ee74-4374-ab4d-420dca1d8fa8" config-ref="Web_Service_Consumer_Config">
					<wsc:message >
						<wsc:headers ><![CDATA[#[%dw 2.0
output application/xml

ns ns0 http://training.mulesoft.com/
  ---
  
  "headers": {
   
   ns0#updateCoinHeader:{
    documentID: vars.id
   }
  }]]]></wsc:headers>
					</wsc:message>
				</wsc:consume>
				<email:send doc:name="Send successful e-mail" doc:id="781fa466-7575-4624-9b17-bc0b5e06f12f" config-ref="Email_SMTP" fromAddress="ostap20021906@gmail.com" subject="Successful">
					<email:to-addresses >
						<email:to-address value="cobra228325@gmail.com" />
					</email:to-addresses>
					<email:body contentType="text/plain" encoding="UTF-8">
						<email:content ><![CDATA[#[%dw 2.0
ns ns0 http://training.mulesoft.com/

output text/plain
---
payload.body.ns0#updateCoinResponse.response]]]></email:content>
					</email:body>
				</email:send>
				<ee:transform doc:name="Response" doc:id="34322c0f-5835-4988-8c01-87219a1c190d">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0ns ns0 http://training.mulesoft.com/

output application/json
---
{
	"result": payload.body.ns0#updateCoinResponse.response
}]]></ee:set-payload>
			</ee:message>
			<ee:variables>
				<ee:set-variable variableName="httpStatus"><![CDATA[201]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
      
</when>
      <otherwise >
        <ee:transform doc:name="Document doesn't exist" doc:id="d7cffc6f-4165-4b8e-87a2-bce145d5a973" >
          <ee:message >
            <ee:set-payload ><![CDATA[%dw 2.0
ns ns0 http://training.mulesoft.com/

output application/json
---
{
  result: payload.body.ns0#readCoinResponse.response
}]]></ee:set-payload>
          </ee:message>
          <ee:variables >
            <ee:set-variable variableName="httpStatus" ><![CDATA[200]]></ee:set-variable>
          </ee:variables>
        </ee:transform>
      </otherwise>
    </choice>
	</sub-flow>
	<flow name="returnAllNewDataSubFlow" doc:id="88c39323-9410-4116-b7d5-c133729a3041" initialState="started">
		<vm:listener queueName="sysResponse" doc:name="Listener" doc:id="3cea77ef-a6df-4c5e-945e-c2077fabb61c" config-ref="VM_Config" numberOfConsumers="50" timeout="3"/>
		<logger level="INFO" doc:name="Log of allNewData" doc:id="0043a76a-189d-4803-9c76-bba78e7ed316" message="#[payload]"/>
		<vm:publish queueName="allDataResponse" doc:name="Publish" doc:id="77c16774-16a7-4014-9bb2-265e0eeecc05" config-ref="VM_Config"/>
	</flow>
</mule>
