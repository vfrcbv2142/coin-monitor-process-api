<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:validation="http://www.mulesoft.org/schema/mule/validation" xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
	xmlns:mongo="http://www.mulesoft.org/schema/mule/mongo"
	xmlns:wsc="http://www.mulesoft.org/schema/mule/wsc" xmlns:jms="http://www.mulesoft.org/schema/mule/jms" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/jms http://www.mulesoft.org/schema/mule/jms/current/mule-jms.xsd
http://www.mulesoft.org/schema/mule/wsc http://www.mulesoft.org/schema/mule/wsc/current/mule-wsc.xsd
http://www.mulesoft.org/schema/mule/mongo http://www.mulesoft.org/schema/mule/mongo/current/mule-mongo.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/validation http://www.mulesoft.org/schema/mule/validation/current/mule-validation.xsd">
    <http:request-config name="HTTP_Request_configuration" doc:name="HTTP Request configuration" doc:id="0ff05801-3a8e-44f2-8c3c-f213deb15772" basePath="/api" >
    <http:request-connection host="coin-market-cap-system-api1.us-e2.cloudhub.io" port="80" />
  </http:request-config>
  <http:request-config name="HTTP_Request_configuration1" doc:name="HTTP Request configuration" doc:id="7416d3c4-b37c-4246-80b6-1f29b0fa8f3e" basePath="/api" >
    <http:request-connection host="coin-cap-api-demo.us-e2.cloudhub.io" port="80" />
  </http:request-config>
	<sub-flow name="getCoins" doc:id="868bd2a4-4680-48c7-80ab-1f2e1ad152d1" >
		<scatter-gather doc:name="Scatter-Gather" doc:id="202984c4-85ad-456f-b6d5-1cdc6e989f90" >
      <route >
				<http:request method="GET" doc:name="GET coinMarket" doc:id="c7e8e51b-4e2d-4e92-af38-6549a7eea251" config-ref="HTTP_Request_configuration" path="/cryptocurrency/quotes/latest" >
          <http:query-params ><![CDATA[#[output application/java
---
{
  "slug" : vars.slug1
}]]]></http:query-params>
        </http:request>
        <set-variable value="#[(payload.data pluck (object,index)-&gt;{
&#10;      &quot;name&quot;: object.name,
&#10;         &quot;symbol&quot;: object.symbol,
&#10;         &quot;supply&quot;: object.'total_supply',
&#10;          &quot;coin_market_price&quot;: object.quote.USD.price,
&#10;          &quot;coin_market_volume24h&quot;: object.quote.USD.'volume_24h'  
&#10;}) orderBy $.name]" doc:name="payload-coinMarket" doc:id="08534eb7-206a-4680-b432-f52e5782978a" variableName="market" />
        <logger level="INFO" doc:name="Logger" doc:id="4b306d1d-14d8-40ac-b2fc-997ae5b3e85a" message="#[payload]" />
      </route>
      <route >
        <http:request method="GET" doc:name="GET coinCup" doc:id="70013cd3-8200-4528-98c3-1c5af6faf42d" config-ref="HTTP_Request_configuration1" path="/assets" >
          <http:query-params ><![CDATA[#[output application/java
---
{
  "ids" : vars.slug1
 }]]]></http:query-params>
        </http:request>
        <set-variable value='#[(payload.data map (object,index)-&gt;{
&#10;      "name": object.name,
&#10;         "symbol": object.symbol,
&#10;          "coin_cap_price": object.priceUsd,
&#10;          "coin_cap_volume24h": object.volumeUsd24Hr  
&#10;}) orderBy $.name]' doc:name="payload-coinCap" doc:id="5ad0397d-15e3-4294-a3b0-2b38df69fcb5" variableName="cap" />
        <logger level="INFO" doc:name="Logger" doc:id="2080a0bb-7bd3-4211-b768-18cb553706fe" message="#[payload]" />
      </route>
    </scatter-gather>
  </sub-flow>
	<sub-flow name="checkpricesFlow" doc:id="9837f920-93df-4961-8fd4-ec0c514b3bc6" >
		<set-variable value="#[attributes.uriParams.id]" doc:name="Set Key" doc:id="3fb00003-6483-4cc4-a4e7-db12623a5d0f" variableName="key"/>
		<wsc:consume doc:name="Read data from SOAP" doc:id="72ef0f35-0fb1-44b0-ab2e-4ae3f2196089" config-ref="Web_Service_Consumer_Config" operation="readCoin">
			<wsc:message >
				<wsc:body ><![CDATA[#[null]]]></wsc:body>
				<wsc:headers ><![CDATA[#[%dw 2.0
output application/xml

ns ns0 http://training.mulesoft.com/
  ---
  
  "headers": {
  	
  	ns0#readCoinHeader:{
  		documentID: vars.key
  	}
  }]]]></wsc:headers>
			</wsc:message>
		</wsc:consume>
		<choice doc:name="Choice" doc:id="47971c86-5d91-47a6-b5c8-0895fca585f1" >
      <when expression="#[%dw 2.0&#10;ns ns0 http://training.mulesoft.com/&#10;---&#10;payload.body.ns0#readCoinResponse.response == null]">
				<ee:transform doc:name="set consumePayload" doc:id="d4788987-4b4d-414e-9b8b-f2a7cf938c79">
							<ee:message>
							</ee:message>
							<ee:variables>
								<ee:set-variable variableName="consumePayload"><![CDATA[%dw 2.0
output application/json
ns ns0 http://training.mulesoft.com/
---
{
	date: payload.body.ns0#readCoinResponse.date default "",
	data: payload.body.ns0#readCoinResponse.data.*coin map ( coin , indexOfCoin ) -> {
		name: coin.name default "",
		symbol: coin.symbol default "",
		supply: coin.supply default "",
		description: coin.description default "",
		developmentStatus: coin.developmentStatus default "",
		proofType: coin.proofType default "",
		orgStructure: coin.orgStructure default "",
		coin_market_price: coin.coin_market_price default "",
		coin_cap_price: coin.coin_cap_price default "",
		coin_market_volume24h: coin.coin_market_volume24h default "",
		coin_cap_volume24h: coin.coin_cap_volume24h default ""
	}
}

]]></ee:set-variable>
							</ee:variables>
						</ee:transform>
				<ee:transform doc:name="create array of slugs" doc:id="cac632f8-5901-4c2e-bca0-7dbc44849048">
					<ee:message>
					</ee:message>
					<ee:variables>
						<ee:set-variable variableName="slug"><![CDATA[%dw 2.0
output application/json

---
vars.consumePayload.data map ( datum , indexOfDatum ) -> {
	slug: datum.name
}]]></ee:set-variable>
					</ee:variables>
				</ee:transform>
				<set-variable value='#[lower(flatten(vars.slug.slug) joinBy ",") replace " " with "-"]' doc:name="create string from array of slugs" doc:id="044cb55e-61db-425d-9ffe-3b408673af4b" variableName="slug1" />
				<flow-ref doc:name="get coins" doc:id="7afff84c-0646-4313-ab12-3a01d278a4d6" name="getCoins" />
				<ee:transform doc:name="set requestsPayload" doc:id="2a98acc5-d1b3-428b-b72a-061debc2595f">
					<ee:message>
					</ee:message>
					<ee:variables>
						<ee:set-variable variableName="requestPayload"><![CDATA[%dw 2.0
output application/json
import modules::trimString
var dat = vars.market
var dat1 = vars.cap
var body={
  "data": dat map (object, index)->{
    "data1" : dat1 map(object2,index2)->{
         ("name": object.name)if(object.name==object2.name or object2.name==null),
         ("symbol": object.symbol)if(object.name==object2.name),
         ("supply": object.supply as String)if(object.name==object2.name),
          ("coin_market_price": object.'coin_market_price' ++ " " ++ "\$")if(object.name==object2.name),
          ("coin_cap_price": object2.'coin_cap_price' default "" ++ " " ++ "\$")if(object.name==object2.name),
          ("coin_market_volume24h":trimString::trimStringOfDigits(object.'coin_market_volume24h',2) ++ " " ++ "\$")if(object.name==object2.name),
          ("coin_cap_volume24h": trimString::trimStringOfDigits(object2.'coin_cap_volume24h' default "" ,2) ++ " " ++ "\$")if(object.name==object2.name)
  }
   }
}

---
{
"date": now() as String,
  "data":(flatten(body.data.data1) filter(value,index)->(sizeOf(value)>0)) orderBy $.name
  
}]]></ee:set-variable>
					</ee:variables>
				</ee:transform>
				<ee:transform doc:name="combine Data" doc:id="22e0989f-3db4-4c2d-a200-bf88e93731be">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/json
var dataR = vars.requestPayload  
var dataC = vars.consumePayload
var oldDate = vars.consumePayload.date 
var dateDiff = (now() - oldDate)
var body={
	"data": dataC.data map (object, index)->{
		"data1": dataR.data  map(object2,index2)->{
			("name": object.name)if(object.name==object2.name or object2.name==null),
			("symbol": object.symbol)if(object.name==object2.name),
			("supply": object.supply as String)if(object.name==object2.name),
			("description": object.description)if(object.name==object2.name),
			("developmentStatus": object.developmentStatus) if (object.name==object2.name),
			("proofType": object.proofType) if (object.name==object2.name),
			("orgStructure": object.orgStructure) if (object.name==object2.name),
			("coin_market_oldPriceUsd": object.coin_market_price) if (object.name==object2.name),
			("coin_cap_oldPriceUsd": object.coin_cap_price) if (object.name==object2.name),
			("coin_market_newPriceUsd": object2.'coin_market_price') if (object.name==object2.name),
			("coin_cap_newPriceUsd": object2.'coin_cap_price') if (object.name==object2.name),
			("coin_market_priceDifference": (((((object2.coin_market_price replace "\$" with "")replace " " with "") as Number)  - (((object.coin_market_price replace "\$" with "")replace " " with "") as Number)) as Number) ++ " " ++ "\$" as String) if (object.name==object2.name),
			("coin_cap_priceDifference": (((((object2.coin_cap_price replace "\$" with "")replace " " with "") as Number)  - (((object.coin_cap_price replace "\$" with "")replace " " with "") as Number)) as Number) ++ " " ++ "\$" as String) if (object.name==object2.name),
			("coin_market_volume24h": object2.'coin_market_volume24h')if(object.name==object2.name),
			("coin_cap_volume24h":object2.'coin_cap_volume24h' )if(object.name==object2.name)
		}
	}
}
---
{
	"oldDate": oldDate as String,
	"newDate": now() as String,
	"dateDifference": dateDiff.days as String ++ " days, " ++ dateDiff.hours as String ++ " hours, " ++ dateDiff.minutes as String ++ " minutes, " ++ dateDiff.secs as String ++ " seconds",
	"data": (flatten(body.data.data1) filter(value,index)->(sizeOf(value)>0)) orderBy $.name
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
				<ee:transform doc:name="Json to XML" doc:id="b8c80d8e-c01e-4c14-94b1-a2ffa5c74481">
					<ee:message>
					</ee:message>
					<ee:variables>
						<ee:set-variable variableName="XMLPayload"><![CDATA[%dw 2.0
output application/xml
ns ns0 http://training.mulesoft.com/
---
  ns0#updateCoin: {
    oldDate: payload.oldDate,
    newDate: payload.newDate,
	dateDifference: payload.dateDifference, 
    data:{(payload.data map (object, index)-> {
      coin: object
  })
  }
 }]]></ee:set-variable>
					</ee:variables>
				</ee:transform>
				<wsc:consume doc:name="Update Coin" doc:id="20b333dc-e410-495e-bc41-5e23bdb47fc9" operation="updateCoin" config-ref="Web_Service_Consumer_Config">
					<wsc:message>
						<wsc:body><![CDATA[#[vars.XMLPayload]]]></wsc:body>
						<wsc:headers><![CDATA[#[%dw 2.0
output application/xml

ns ns0 http://training.mulesoft.com/
  ---
  
  "headers": {
  	
  	ns0#updateCoinHeader:{
  		documentID: vars.key
  	}
  }]]]></wsc:headers>
					</wsc:message>
				</wsc:consume>
				<ee:transform doc:name="Final response" doc:id="8935d29e-c518-4920-b8d1-4c2b43dae68c">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
ns ns0 http://training.mulesoft.com/

output application/json
---
{
	
  "result": payload.body.ns0#updateCoinResponse.response
}
]]></ee:set-payload>
			</ee:message>
			<ee:variables>
				<ee:set-variable variableName="httpStatus"><![CDATA[201]]></ee:set-variable>
			</ee:variables>
		</ee:transform>

      </when>
			<otherwise >
        <ee:transform doc:name="Document doesn't exist" doc:id="7a1f4d47-f759-4b0e-970c-6ba97d30f861" >
          <ee:message >
            <ee:set-payload ><![CDATA[%dw 2.0
ns ns0 http://training.mulesoft.com/

output application/json
---
{
  result: payload.body.ns0#readCoinResponse.response
}]]></ee:set-payload>
          </ee:message>
          <ee:variables >
            <ee:set-variable variableName="httpStatus" ><![CDATA[200]]></ee:set-variable>
          </ee:variables>
        </ee:transform>
      </otherwise>
    </choice>
	
</sub-flow>
</mule>
