<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns:os="http://www.mulesoft.org/schema/mule/os" xmlns:email="http://www.mulesoft.org/schema/mule/email"
	xmlns:validation="http://www.mulesoft.org/schema/mule/validation"
	xmlns:batch="http://www.mulesoft.org/schema/mule/batch" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns:wsc="http://www.mulesoft.org/schema/mule/wsc" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/wsc http://www.mulesoft.org/schema/mule/wsc/current/mule-wsc.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd
http://www.mulesoft.org/schema/mule/validation http://www.mulesoft.org/schema/mule/validation/current/mule-validation.xsd
http://www.mulesoft.org/schema/mule/email http://www.mulesoft.org/schema/mule/email/current/mule-email.xsd
http://www.mulesoft.org/schema/mule/os http://www.mulesoft.org/schema/mule/os/current/mule-os.xsd">
	<sub-flow name="deleteCryptosSubFlow" doc:id="f71e0ff9-8efb-4d24-b3c9-73c5559b7e4c" >
		<validation:is-not-null doc:name="Is not null ID" doc:id="57054062-8d2a-4e7a-a67d-2c71eb4e6f08" value="#[attributes.uriParams.id]" message="document id is null"/>
		<wsc:consume operation="deleteCoin" doc:name="CoinStorageService_deleteCoin" doc:id="b9e2801a-874b-4739-9994-5b3a34d8eb5f" config-ref="Web_Service_Consumer_Config">
			<wsc:message >
				<wsc:body ><![CDATA[#[null]]]></wsc:body>
				<wsc:headers ><![CDATA[#[%dw 2.0
ns ns0 http://training.mulesoft.com/
  ---
  "headers": {
  	ns0#deleteCoinHeader:{
    	documentID: attributes.uriParams."id"
    	}
  }]]]></wsc:headers>
			</wsc:message>
		</wsc:consume>
		<ee:transform doc:name="result" doc:id="110f9f55-6090-45ac-980e-77c74d41fd45" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
ns ns0 http://training.mulesoft.com/
---
result: payload.body.ns0#deleteCoinResponse.response]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<logger level="INFO" doc:name="Logger" doc:id="19684b16-e959-4f0c-a268-c51f13453a0c" message="#[payload]"/>
	
</sub-flow>
	<sub-flow name="getCryptos" doc:id="4bde842b-cb68-433f-9458-0a772962aaa3" >
		<set-variable value="#[message.attributes.queryParams.'slug']" doc:name="setSlug" doc:id="df9f5399-c0c0-4d60-ba26-005d4332899b" variableName="slug" />
		<set-variable value="#[message.attributes.queryParams.'sortBy']" doc:name="set sortBy" doc:id="a4148948-b394-49ee-8c3e-052a356aa8e3" variableName="sortBy"/>
		<flow-ref doc:name="to getCoinMarket" doc:id="e0816f23-f17e-429c-bf54-2448f55b4e1f" name="getCoinMarket"/>
		<choice doc:name="Choice" doc:id="59adefab-beb3-41be-9b97-4843a40b089e" >
			<when expression="#[vars.sortBy == 'price']">
				<ee:transform doc:name="sortBy name" doc:id="0232434c-bd2e-44ab-862d-19c1a3774a43" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
import modules::trimString
var dat = vars.'coin-market'
var dat1 = vars.'coin-cap'
var body={
	"data": dat map (object, index)->{
		"data1" : dat1 map(object2,index2)->{
     		("name": object.name)if(object.name==object2.name),
     		("symbol": object.symbol)if(object.name==object2.name),
     		("supply": object.supply as String)if(object.name==object2.name),
      		("coin_market_price": object.'coin_market_price' ++ " \$")if(object.name==object2.name),
      		("coin_cap_price": object2.'coin_cap_price' default "" ++ " \$")if(object.name==object2.name),
      		("coin_market_volume24h":trimString::trimStringOfDigits(object.'coin_market_volume24h',2) ++ " \$")if(object.name==object2.name),
      		("coin_cap_volume24h": trimString::trimStringOfDigits(object2.'coin_cap_volume24h' default "" ,2) ++ " \$")if(object.name==object2.name)
	}
 	}
}

---
{
"date": now() as String,
	"data":(flatten(body.data.data1) filter(value,index)->(sizeOf(value)>0)) default []
	orderBy ($.'coin_market_price' replace " \$" with "") as String as Number
	
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
			</when>
			<when expression="#[vars.sortBy == 'volume']">
				<ee:transform doc:name="sortBy volume" doc:id="56cbb47d-f22f-4208-8ff9-b7557362413a" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
import modules::trimString
var dat = vars.'coin-market'
var dat1 = vars.'coin-cap'
var body={
	"data": dat map (object, index)->{
		"data1" : dat1 map(object2,index2)->{
     		("name": object.name)if(object.name==object2.name),
     		("symbol": object.symbol)if(object.name==object2.name),
     		("supply": object.supply as String)if(object.name==object2.name),
      		("coin_market_price": object.'coin_market_price' ++ " \$")if(object.name==object2.name),
      		("coin_cap_price": object2.'coin_cap_price' default "" ++ " \$")if(object.name==object2.name),
      		("coin_market_volume24h":trimString::trimStringOfDigits(object.'coin_market_volume24h',2) ++ " \$")if(object.name==object2.name),
      		("coin_cap_volume24h": trimString::trimStringOfDigits(object2.'coin_cap_volume24h' default "" ,2) ++ " \$")if(object.name==object2.name)
	}
 	}
}

---
{
"date": now() as String,
	"data":(flatten(body.data.data1) filter(value,index)->(sizeOf(value)>0)) default []
	orderBy ($.'coin_market_volume24h' replace " \$" with "") as String as Number
	
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
			</when>
			<otherwise>
				<ee:transform doc:name="default by name" doc:id="4d7f1968-28e5-4284-a353-00440c27e27e">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/json
import modules::trimString
var dat = vars.'coin-market'
var dat1 = vars.'coin-cap'
var body={
	"data": dat map (object, index)->{
		"data1" : dat1 map(object2,index2)->{
     		("name": object.name)if(object.name==object2.name),
     		("symbol": object.symbol)if(object.name==object2.name),
     		("supply": object.supply as String)if(object.name==object2.name),
      		("coin_market_price": object.'coin_market_price' ++ " \$")if(object.name==object2.name),
      		("coin_cap_price": object2.'coin_cap_price' default "" ++ " \$")if(object.name==object2.name),
      		("coin_market_volume24h":trimString::trimStringOfDigits(object.'coin_market_volume24h',2) ++ " \$")if(object.name==object2.name),
      		("coin_cap_volume24h": trimString::trimStringOfDigits(object2.'coin_cap_volume24h' default "" ,2) ++ " \$")if(object.name==object2.name)
	}
 	}
}

---
{
"date": now() as String,
	"data":(flatten(body.data.data1) filter(value,index)->(sizeOf(value)>0)) orderBy $.name
	
}
]]></ee:set-payload>
			</ee:message>
		</ee:transform>
			</otherwise>
		</choice>
		<flow-ref doc:name="to kayValueProcess" doc:id="4a37af6e-1cb2-4ce8-89d5-f9511dde5a93" name="keyValueProcess" />
	</sub-flow>
	<sub-flow name="keyValueProcess" doc:id="732a2b66-2b03-4feb-a6e8-37e9b9dfae1d" >
		<ee:transform doc:name="JSON to XML" doc:id="2f5b540e-73ec-4a7f-8ea8-b882735a0672" >
			<ee:message >
			</ee:message>
			<ee:variables >
				<ee:set-variable variableName="payloadXML" ><![CDATA[%dw 2.0
output application/xml
ns ns0 http://training.mulesoft.com/
---
  ns0#createCoin: {
    date: payload.date,
    data:{(payload.data map (object, index)-> {
      coin: object
  })
  }
 }
]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<wsc:consume operation="createCoin" doc:name="Consume" doc:id="c2c35c42-fded-4f3b-a470-523b11c72681" config-ref="Web_Service_Consumer_Config">
			<wsc:message>
				<wsc:body><![CDATA[#[vars.payloadXML]]]></wsc:body>
			</wsc:message>
		</wsc:consume>
		<set-variable value="#[%dw 2.0
&#10;ns ns0 http://training.mulesoft.com/
&#10;output text/plain
&#10;---
&#10;payload.headers.createCoinResponseHeader.ns0#createCoinResponseHeader.documentID]" doc:name="Set key" doc:id="04167053-7953-4e92-8629-fde2c3e64217" variableName="key" />
		<email:send doc:name="Send" doc:id="28ee3651-d26c-4b41-b99e-89a919a0f895" config-ref="Email_SMTP" fromAddress="Typicm6663@gmail.com" subject="New coin created">
			<email:to-addresses >
				<email:to-address value="Typicm@gmail.com" />
			</email:to-addresses>
			<email:body contentType="text/plain" encoding="UTF-8">
				<email:content><![CDATA[#["Coin with ID: " ++ vars.key as String ++" successfully created"]]]></email:content>
			</email:body>
		</email:send>
		<ee:transform doc:name="HashCode" doc:id="95835dfa-7c6d-4b12-9604-16d7e69d63ba">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/json
var pay = payload
---
{
	"hash": java!com::currency::CryptoCurrency::getHashCode(pay),
	"data": payload
}]]></ee:set-payload>
			</ee:message>
			<ee:variables>
				<ee:set-variable variableName="data"><![CDATA[%dw 2.0
output application/json
---
payload]]></ee:set-variable>
				<ee:set-variable variableName="httpStatus" ><![CDATA[201]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<os:store doc:name="Store" doc:id="da6742ce-e5ff-4413-aee4-dc0267fbf88f" key="vars.key" objectStore="Object_store">
			<os:value ><![CDATA[#[payload.hash]]]></os:value>
		</os:store>
		<ee:transform doc:name="Transform Message" doc:id="1ea7df59-813a-4ff7-b2e9-2887060f16fd" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	Message: "Document with ID: "++ (vars.key default "") ++" successfully created"
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</sub-flow>
	<sub-flow name="getCoinMarket" doc:id="07d49a7c-7c93-4ddd-803e-ac0c87738a8f" >
		<http:request method="GET" doc:name="GET coinMarket" doc:id="e614c6bd-57a7-4686-8076-68982b4ccc83" path="/cryptocurrency/quotes/latest" config-ref="HTTP_Request_configuration_CoinMarket">
					<http:query-params><![CDATA[#[output application/java
---
{
	"slug" : vars.slug
}]]]></http:query-params>
				</http:request>
		<set-variable value="#[payload.data pluck (object,index)-&gt;{
&#10;			&quot;name&quot;: object.name,
&#10;     		&quot;symbol&quot;: object.symbol,
&#10;     		&quot;supply&quot;: object.'total_supply',
&#10;      		&quot;coin_market_price&quot;: object.quote.USD.price,
&#10;      		&quot;coin_market_volume24h&quot;: object.quote.USD.'volume_24h'	
&#10;}]" doc:name="payload-coinMarket" doc:id="f010e0de-e497-481c-92cc-e873830c49c4" variableName="coin-market" />
		<logger level="INFO" doc:name="Logger" doc:id="cbb0fc92-f4f8-47b5-a071-c77d8862b388" message='"request CoinMarket is successfully"' />
		<flow-ref doc:name="getCoinCup" doc:id="678ccc00-ac43-4348-a1d7-2fd49ac636e5" name="getCoinCup" />
	</sub-flow>
	<sub-flow name="getCoinCup" doc:id="e88a272e-3f03-4d96-b22b-f884f7e3a95d" >
		<http:request method="GET" doc:name="GET coinCup" doc:id="3515b3d3-ea76-4d8a-a9cb-8e732ea1c62c" config-ref="HTTP_Request_configuration_CoinCup" path="/assets">
					<http:query-params><![CDATA[#[output application/java
---
{
	"ids" : vars.slug
}]]]></http:query-params>
				</http:request>
		<set-variable value='#[payload.data map (object,index)-&gt;{
&#10;			"name": object.name,
&#10;     		"symbol": object.symbol,
&#10;      		"coin_cap_price": object.priceUsd,
&#10;      		"coin_cap_volume24h": object.volumeUsd24Hr	
&#10;}]' doc:name="payload-coinCap" doc:id="fcf4c4b3-d8a2-434d-a8ae-481c1d3f4a0b" variableName="coin-cap" />
		<logger level="INFO" doc:name="Logger" doc:id="072c11b2-f079-46ed-9ce1-776b12143ff1" message='"request CoinCup is successfully"' />
	</sub-flow>
	<sub-flow name="readCryptos" doc:id="69246f41-45c1-4506-b885-96ea7054f3c3" >
		<set-variable value='#[attributes.uriParams.id]' doc:name="Set Variable" doc:id="0176bf1f-a50b-4a88-b49e-794cf716385e" variableName="setID"/>
		<wsc:consume doc:name="Consume" doc:id="daa3166d-7614-4d84-86a5-c47e35f44994" config-ref="Web_Service_Consumer_Config" operation="readCoin">
			<wsc:message >
				<wsc:body ><![CDATA[#[null]]]></wsc:body>
				<wsc:headers ><![CDATA[#[%dw 2.0
output application/xml
ns ns0 http://training.mulesoft.com/
  ---
  "headers": {
    ns0#readCoinHeader:{
      documentID: vars.setID
      }
  }]]]></wsc:headers>
			</wsc:message>
		</wsc:consume>
		<choice doc:name="Choice" doc:id="6a756e09-80e6-4253-8d80-901039524034" >
			<when expression="#[%dw 2.0&#10;ns ns0 http://training.mulesoft.com/&#10;---&#10;payload.body.ns0#readCoinResponse.response == null]">
				<ee:transform doc:name="Transform Message" doc:id="beb3b236-9f91-4d09-866a-49bb179d86dc" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
ns ns0 http://training.mulesoft.com/
output application/json
---
{
  (oldDate: payload.body.ns0#readCoinResponse.oldDate) if (payload.body.ns0#readCoinResponse.oldDate != null),
  (newDate: payload.body.ns0#readCoinResponse.newDate) if (payload.body.ns0#readCoinResponse.newDate != null),
  (dateDifference: payload.body.ns0#readCoinResponse.dateDifference) if (payload.body.ns0#readCoinResponse.dateDifference != null),
  (date: payload.body.ns0#readCoinResponse.date) if (payload.body.ns0#readCoinResponse.date != null),
  data: payload.body.ns0#readCoinResponse.data.*coin map (object, index) -> {
    name: object.name,
    symbol: object.symbol,
    supply: object.supply,
    (description: object.description) if (object.description != null),
    (developmentStatus: object.developmentStatus) if (object.developmentStatus != null),
    (proofType: object.proofType) if (object.proofType != null),
    (orgStructure: object.orgStructure) if (object.orgStructure != null),
    (coin_market_oldPriceUSD: object.'coin_market_oldPriceUSD') if (object.'coin_market_oldPriceUSD' != null),
    (coin_cap_oldPriceUSD: object.'coin_cap_oldPriceUSD') if (object.'coin_cap_oldPriceUSD' != null),
    (coin_market_newPriceUSD: object.'coin_market_newPriceUSD') if (object.'coin_market_newPriceUSD' != null),
    (coin_cap_newPriceUSD: object.'coin_cap_newPriceUSD') if (object.'coin_cap_newPriceUSD' != null),
    (coin_market_priceDifference: object.'coin_market_priceDifference') if (object.'coin_market_priceDifference' != null),
    (coin_cap_newPriceUSD: object.'coin_cap_priceDifference') if (object.'coin_cap_priceDifference' != null),
    (coin_market_price: object.'coin_market_price') if (object.'coin_market_price' != null),
    (coin_cap_price: object.'coin_cap_price') if (object.'coin_cap_price' != null),
    coin_market_volume24h: object.'coin_market_volume24h',
    coin_cap_volume24h: object.'coin_cap_volume24h'
  }
}]]></ee:set-payload>
					</ee:message>
					<ee:variables >
						<ee:set-variable variableName="httpStatus" ><![CDATA[200]]></ee:set-variable>
					</ee:variables>
				</ee:transform>
			</when>
			<otherwise >
				<ee:transform doc:name="Document doesn't exist" doc:id="d4ee0741-81c2-485d-9d9d-cc58122017ee" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
ns ns0 http://training.mulesoft.com/

output application/json
---
{
	result: payload.body.ns0#readCoinResponse.response
}]]></ee:set-payload>
					</ee:message>
					<ee:variables >
						<ee:set-variable variableName="httpStatus" ><![CDATA[200]]></ee:set-variable>
					</ee:variables>
				</ee:transform>
			</otherwise>
		</choice>
	</sub-flow>
	<flow name="checkpricesFlow" doc:id="967bfff7-90ea-4d83-93ba-f9e064d65d67" >
		<set-variable value="#[message.attributes.uriParams.id]" doc:name="Set Key" doc:id="8ce9fc6e-a62f-4fed-8b06-c57e5fd994e1" variableName="key"/>
		<wsc:consume doc:name="Read data from SOAP" doc:id="bc077c29-b55a-4495-ad80-4ec3954456f6" config-ref="Web_Service_Consumer_Config" operation="readCoin">
<wsc:message >
				<wsc:body ><![CDATA[#[null]]]></wsc:body>
				<wsc:headers ><![CDATA[#[%dw 2.0
output application/xml
ns ns0 http://training.mulesoft.com/
  ---
  "headers": {
  	
  	ns0#readCoinHeader:{
  		documentID: vars.key
  	}
  }]]]></wsc:headers>
			</wsc:message>
		</wsc:consume>
		<choice doc:name="Choice" doc:id="2d293656-3044-4975-9f48-59d0404eab21" >
      <when expression="#[%dw 2.0&#10;ns ns0 http://training.mulesoft.com/&#10;---&#10;payload.body.ns0#readCoinResponse.response == null]">
				<ee:transform doc:name="set consumePayload" doc:id="4cf58386-70d9-42b9-b10e-7db2d56c4c67">
							<ee:message>
							</ee:message>
							<ee:variables>
								<ee:set-variable variableName="consumePayload"><![CDATA[%dw 2.0
output application/json
ns ns0 http://training.mulesoft.com/
---
{
	date: payload.body.ns0#readCoinResponse.date default "",
	data: payload.body.ns0#readCoinResponse.data.*coin map ( coin , indexOfCoin ) -> {
		name: coin.name default "",
		symbol: coin.symbol default "",
		supply: coin.supply default "",
		description: coin.description default "",
		developmentStatus: coin.developmentStatus default "",
		proofType: coin.proofType default "",
		orgStructure: coin.orgStructure default "",
		coin_market_price: coin.coin_market_price default "",
		coin_cap_price: coin.coin_cap_price default "",
		coin_market_volume24h: coin.coin_market_volume24h default "",
		coin_cap_volume24h: coin.coin_cap_volume24h default ""
	}
}

]]></ee:set-variable>
							</ee:variables>
						</ee:transform>
				<ee:transform doc:name="create array of slugs" doc:id="be85ea64-af8a-4c91-9f07-23d6a3ca76dd">
					<ee:message>
					</ee:message>
					<ee:variables>
						<ee:set-variable variableName="slug"><![CDATA[%dw 2.0
output application/json

---
vars.consumePayload.data map ( datum , indexOfDatum ) -> {
	slug: datum.name
}]]></ee:set-variable>
					</ee:variables>
				</ee:transform>
				<set-variable value='#[lower((flatten(vars.slug.slug)) joinBy ",") replace " " with "-"]' doc:name="create string from array of slugs" doc:id="da35f8d4-97ad-49e6-95d1-71e41a1f2725" variableName="slug1" />
				<flow-ref doc:name="get coinMarket" doc:id="a4b2d435-3696-41fb-9f4a-5e8e4a7a9534" name="getCoinMarket" />
				<flow-ref doc:name="get coinCap" doc:id="5cf2cf9f-c827-4da5-9f83-8751dbaf62e7" name="getCoinCup"/>
				<ee:transform doc:name="set requestsPayload" doc:id="4a9ebd2e-f015-4a4b-8944-3ea0df879d0b">
					<ee:message>
					</ee:message>
					<ee:variables>
						<ee:set-variable variableName="requestPayload"><![CDATA[%dw 2.0
output application/json
import modules::trimString
var dat = vars.market
var dat1 = vars.cap
var body={
  "data": dat map (object, index)->{
    "data1" : dat1 map(object2,index2)->{
         ("name": object.name)if(object.name==object2.name or object2.name==null),
         ("symbol": object.symbol)if(object.name==object2.name),
         ("supply": object.supply as String)if(object.name==object2.name),
          ("coin_market_price": object.'coin_market_price' ++ " " ++ "\$")if(object.name==object2.name),
          ("coin_cap_price": object2.'coin_cap_price' default "" ++ " " ++ "\$")if(object.name==object2.name),
          ("coin_market_volume24h":trimString::trimStringOfDigits(object.'coin_market_volume24h',2) ++ " " ++ "\$")if(object.name==object2.name),
          ("coin_cap_volume24h": trimString::trimStringOfDigits(object2.'coin_cap_volume24h' default "" ,2) ++ " " ++ "\$")if(object.name==object2.name)
  }
   }
}

---
{
"date": now() as String,
  "data":(flatten(body.data.data1) filter(value,index)->(sizeOf(value)>0)) orderBy $.name
  
}]]></ee:set-variable>
					</ee:variables>
				</ee:transform>
				<ee:transform doc:name="combine Data" doc:id="915b8034-5a9d-403e-9a01-a47409711fed">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/json
var dataR = vars.requestPayload  
var dataC = vars.consumePayload
var oldDate = vars.consumePayload.date 
var dateDiff = (now() - oldDate)
var body={
	"data": dataC.data map (object, index)->{
		"data1": dataR.data  map(object2,index2)->{
			("name": object.name)if(object.name==object2.name or object2.name==null),
			("symbol": object.symbol)if(object.name==object2.name),
			("supply": object.supply as String)if(object.name==object2.name),
			("description": object.description)if(object.name==object2.name),
			("developmentStatus": object.developmentStatus) if (object.name==object2.name),
			("proofType": object.proofType) if (object.name==object2.name),
			("orgStructure": object.orgStructure) if (object.name==object2.name),
			("coin_market_oldPriceUsd": object.coin_market_price) if (object.name==object2.name),
			("coin_cap_oldPriceUsd": object.coin_cap_price) if (object.name==object2.name),
			("coin_market_newPriceUsd": object2.'coin_market_price') if (object.name==object2.name),
			("coin_cap_newPriceUsd": object2.'coin_cap_price') if (object.name==object2.name),
			("coin_market_priceDifference": (((((object2.coin_market_price replace "\$" with "")replace " " with "") as Number)  - (((object.coin_market_price replace "\$" with "")replace " " with "") as Number)) as Number) ++ " " ++ "\$" as String) if (object.name==object2.name),
			("coin_cap_priceDifference": (((((object2.coin_cap_price replace "\$" with "")replace " " with "") as Number)  - (((object.coin_cap_price replace "\$" with "")replace " " with "") as Number)) as Number) ++ " " ++ "\$" as String) if (object.name==object2.name),
			("coin_market_volume24h": object2.'coin_market_volume24h')if(object.name==object2.name),
			("coin_cap_volume24h":object2.'coin_cap_volume24h' )if(object.name==object2.name)
		}
	}
}
---
{
	"oldDate": oldDate as String,
	"newDate": now() as String,
	"dateDifference": dateDiff.days as String ++ " days, " ++ dateDiff.hours as String ++ " hours, " ++ dateDiff.minutes as String ++ " minutes, " ++ dateDiff.secs as String ++ " seconds",
	"data": (flatten(body.data.data1) filter(value,index)->(sizeOf(value)>0)) orderBy $.name
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
				<ee:transform doc:name="Json to XML" doc:id="c0b1e89c-de39-481a-b32d-3bc3c4df4c37">
					<ee:message>
					</ee:message>
					<ee:variables>
						<ee:set-variable variableName="XMLPayload"><![CDATA[%dw 2.0
output application/xml
ns ns0 http://training.mulesoft.com/
---
  ns0#updateCoin: {
    oldDate: payload.oldDate,
    newDate: payload.newDate,
	dateDifference: payload.dateDifference, 
    data:{(payload.data map (object, index)-> {
      coin: object
  })
  }
 }]]></ee:set-variable>
					</ee:variables>
				</ee:transform>
				<wsc:consume doc:name="Update Coin" doc:id="bad7972f-12f1-40a4-a6e5-34031c5e13bb" operation="updateCoin" config-ref="Web_Service_Consumer_Config">
					<wsc:message>
						<wsc:body><![CDATA[#[vars.XMLPayload]]]></wsc:body>
						<wsc:headers><![CDATA[#[%dw 2.0
output application/xml

ns ns0 http://training.mulesoft.com/
  ---
  
  "headers": {
  	
  	ns0#updateCoinHeader:{
  		documentID: vars.key
  	}
  }]]]></wsc:headers>
					</wsc:message>
				</wsc:consume>
				<ee:transform doc:name="Final response" doc:id="cf7e383d-913c-485e-93bb-9e8d019541e1">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
ns ns0 http://training.mulesoft.com/

output application/json
---
{
	
  "result": payload.body.ns0#updateCoinResponse.response
}
]]></ee:set-payload>
			</ee:message>
			<ee:variables>
				<ee:set-variable variableName="httpStatus"><![CDATA[201]]></ee:set-variable>
			</ee:variables>
		</ee:transform>

      
</when>
			<otherwise >
        <ee:transform doc:name="Document doesn't exist" doc:id="0020ded5-e89f-4f8d-816b-48b8119fce5f" >
          <ee:message >
            <ee:set-payload ><![CDATA[%dw 2.0
ns ns0 http://training.mulesoft.com/

output application/json
---
{
  result: payload.body.ns0#readCoinResponse.response
}]]></ee:set-payload>
          </ee:message>
          <ee:variables >
            <ee:set-variable variableName="httpStatus" ><![CDATA[200]]></ee:set-variable>
          </ee:variables>
        </ee:transform>
      </otherwise>
    </choice>
		<error-handler ref="globalError_Handler" />
	
</flow>
</mule>
